input {
    tcp {
        port => 5044
        codec => json_lines
    }
}

filter {
    json {
        source => "message"
        remove_field => ["severity", "host", "facility_label", "severity_label", "facility", "priority", "headers"]
    }
    if ![ip] or ![port] {
        drop { }
    }
    if ":" in [ip] {
        mutate {
            replace => {
                "host" => "[%{ip}]:%{port}"
            }
        }
    } else {
        
        mutate {
            replace => {
                "host" => "%{ip}:%{port}"
            }
        }
    }
    mutate {
        remove_field => ["message"]
    }

    ip {
        source => "ip"
        inner_ips => "${INNER_IP_LIST}"
        inner_name => "inner"
    }
    #if ![inner] {
    #    drop {}
    #}
    #geoip {
    #    source => "ip"
    #    target => "geoip"
    #    fields => ["city_name", "country_name", "location"]
    #    database => "/usr/share/logstash/config/GeoLite2-City.mmdb"
    #    locale => "zh-CN"
    #}
    ipip {
        source => "ip"
        target => "geoip"
        database => "/usr/share/logstash/config/mydata4vipday2_cn.ipdb"
    }
    if [pro] in ['HTTP', 'HTTPS'] {
        url {
            source => "url"
            url_tpl_name => "url_tpl"
            path_name => "path"
            site_name => "site"
        }
        if "_url_lookup_failure" in [tags] {
            drop { }
        }
    }
}

output {
    if "_grokparsefailure" not in [tags] and "_jsonparsefailure" not in [tags] {
        elasticsearch {
            hosts => ["${ELASTICSEARCH_URL}"]
            index => "${ELASTICSEARCH_INDEX}-%{+YYYYMMdd}"
            template => "/usr/share/logstash/config/passets.json"
            template_name => "passets"
            template_overwrite => true
        }
    }
}
